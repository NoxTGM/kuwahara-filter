float2 UV = GetDefaultSceneTextureUV(Parameters, 14); // UV coordinates for the current pixel
float4 MeanAndVariance[4]; // An array to hold the mean and variance for each kernel
float4 Range; // Holds the for loop bounds for the current kernel
float Angle = GetPixelAngle(UV); // Angle for the current pixel
float2x2 RotationMatrix = float2x2(cos(Angle), -sin(Angle), sin(Angle), cos(Angle)); // Create the rotation matrix using the angle

// Calculate the mean and variance for the top left kernel
Range = float4(-XRadius, 0, -YRadius, 0);
MeanAndVariance[0] = GetKernelMeanAndVariance(UV, Range, RotationMatrix);

// Calculate the mean and variance for the top right kernel
Range = float4(0, XRadius, -YRadius, 0);
MeanAndVariance[1] = GetKernelMeanAndVariance(UV, Range, RotationMatrix);

// Calculate the mean and variance for the bottom left kernel
Range = float4(-XRadius, 0, 0, YRadius);
MeanAndVariance[2] = GetKernelMeanAndVariance(UV, Range, RotationMatrix);

// Calculate the mean and variance for the bottom right kernel
Range = float4(0, XRadius, 0, YRadius);
MeanAndVariance[3] = GetKernelMeanAndVariance(UV, Range, RotationMatrix);

// Create two variables to hold the final color and minimum variance
// Initialize both with the first kernelâ€™s mean and variance
float3 FinalColor = MeanAndVariance[0].rgb;
float MinimumVariance = MeanAndVariance[0].a;

// Loop over the remaining three kernels and find the kernel with the lowest variance to fianlly return its mean and variance
for (int i = 1; i < 4; i++) {
    if (MeanAndVariance[i].a < MinimumVariance) {
        FinalColor = MeanAndVariance[i].rgb;
        MinimumVariance = MeanAndVariance[i].a;
    }
}

return FinalColor;